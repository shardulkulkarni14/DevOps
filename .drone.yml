kind: pipeline
type: docker
name: default
  # Note: Use as long as the reason for this suddenly occurring error
  #       remains unknown. Also use it if the error suddenly happens during
  #       productive use after problem free operations
clone:
  skip_verify: true


steps:

- name: decrypt and untar - managing secret solution files
  # cp. https://hub.docker.com/r/frapsoft/openssl
  image: frapsoft/openssl
  environment:
    KEY:
      from_secret: key
  commands:
  - openssl enc -d -aes-256-cbc -md sha256 -pass env:KEY -in ./${DRONE_BRANCH}/src.tar.enc -out ./${DRONE_BRANCH}/src.tar
  - tar -xvf ./${DRONE_BRANCH}/src.tar


- name: build all docker images needed
  image: docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - docker --version && cd ${DRONE_BRANCH}
  - docker --version && cd ../src
  - docker build --quiet -t ${DRONE_BRANCH}.check -f Dockerfile.python.df .
  - docker build --quiet -t ${DRONE_BRANCH}.node -f Dockerfile.ubuntu.sshd.df .
  - rm -rf ../src
  - rm -f ./src.tar


- name: node1.local
  image: ${DRONE_BRANCH}.node
    # Note: If an image name is not correct, the Drone runner tries to load it
    #       from Docker Hub. This will most probably lead to various errors.
    #       So, better use 'pull: never' instead of 'pull: if-not-exists'.
  pull: never
  detach: true
  commands:
  - service ssh start
    # Note: The ssh daemon needs to be started manually since Drone seems to
    #       start containers as if with '-it' and '/bin/bash' command was used
  - echo "$(service ssh status) on $(hostname -I)"
  - tail -f --retry /var/log/salt/minion

- name: node2.local
  image: ${DRONE_BRANCH}.node
    # Note: If an image name is not correct, the Drone runner tries to load it
    #       from Docker Hub. This will most probably lead to various errors.
    #       So, better use 'pull: never' instead of 'pull: if-not-exists'.
  pull: never
  detach: true
  commands:
  - service ssh start
    # Note: The ssh daemon needs to be started manually since Drone seems to
    #       start containers as if with '-it' and '/bin/bash' command was used
  - echo "$(service ssh status) on $(hostname -I)"
  - tail -f --retry /var/log/salt/minion

- name: node3.local
  image: ${DRONE_BRANCH}.node
    # Note: If an image name is not correct, the Drone runner tries to load it
    #       from Docker Hub. This will most probably lead to various errors.
    #       So, better use 'pull: never' instead of 'pull: if-not-exists'.
  pull: never
  detach: true
  commands:
  - service ssh start
    # Note: The ssh daemon needs to be started manually since Drone seems to
    #       start containers as if with '-it' and '/bin/bash' command was used
  - echo "$(service ssh status) on $(hostname -I)"
  - tail -f --retry /var/log/salt/minion

- name: salt
  image: ${DRONE_BRANCH}.node
  ports:
    - 4506
    - 4505
  pull: never
  detach: true
  commands:
  - service ssh start
    # Note: The ssh daemon needs to be started manually since Drone seems to
    #       start containers as if with '-it' and '/bin/bash' command was used
  - echo "$(service ssh status) on $(hostname -I)"
  - tail -f --retry /var/log/salt/master

- name: apply terraform configuration
  image: hashicorp/terraform:light
  commands:
  - sleep 5
  - cd ${DRONE_BRANCH}
  - terraform init
  - terraform plan
  - terraform apply -auto-approve
- name: decrypt again
  image: frapsoft/openssl
  environment:
   KEY:
     from_secret: key
  commands:
  - openssl enc -d -aes-256-cbc -md sha256 -pass env:KEY -in ./${DRONE_BRANCH}/src.tar.enc -out ./${DRONE_BRANCH}/src.tar
  - tar -xvf ./${DRONE_BRANCH}/src.tar


- name: check if main worked as expected
  image: ${DRONE_BRANCH}.check
  pull: never
  commands:
  - cd src
  - sleep 2
  - python check.py

volumes:
- name: dockersock
  host:
    path: /var/run/docker.sock

trigger:
  branch:
  - feature*